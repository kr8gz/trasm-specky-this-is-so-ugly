#[cache_output]

extract import "constant.spwn"

impl @trasm {
    parse: (self) {
        // organize the tokens into an array of lines
        let lines = []
        let lineno = -1

        for token in self.lexed {
            if token.line > lineno { lines.push([]) }
            lineno = token.line
            lines[-1].push(token)
        }

        // specific parsing functions
        parse_value = (value: [@token]) -> @dictionary | @NULL {
            if (
                value.length == 2
                && value[0].matches("word", not_inferable_types)
                && (
                    value[1].matches(["num", "word"])
                    || (
                        value[0].val != "ctr"
                        && value[1].matches("sym", "?")
                    )
                )
            ) {
                return {
                    typ: value[0].val,
                    val: value[1].val,
                }
            }

            if value.length == 1 && !value[0].matches("sym") {
                return {
                    typ: value[0].typ,
                    val: value[0].val,
                }
            }

            self.log(
                [value[0].line, value[0].col_start, value[-1].col_end],
                "ERROR: invalid value"
            )
        }

        parse_arguments = (arguments: [@token], predicate: (@token) -> @bool = a => true) -> [@dictionary] {
            if arguments.length == 0 { return [] }

            commas = arguments.enumerate().filter(
                arg => arg[1].matches("sym", ",")
            ).map(
                arg => arg[0]
            )

            split = arguments.split(commas) if commas.length > 0 else [arguments]

            args = split.map(
                arg => arg.filter(
                    token => !token.matches("sym", ",")
                )
            ).filter(!= [])
            
            parsed_args = args.map(parse_value)
            
            for i in 0..parsed_args.length {
                if parsed_args[i] == null { return [] }

                if !predicate(parsed_args[i]) {
                    self.log(
                        [args[i][0].line, args[i][0].col_start, args[i][-1].col_end],
                        "ERROR: invalid argument"
                    )
                    return []
                }
            }
            return parsed_args
        }

        parse_definition = (line: [@token], typ: @string) -> @dictionary | @NULL {
            thing = match typ {
                in const_define_section_tokens: "constant",
                in var_define_section_tokens: "variable",
            }

            if line.length < 2 {
                return self.log(line[0], "ERROR: invalid {} definition".fmt(thing))
            }

            if !line[0].matches("word") {
                return self.log(line[0], "ERROR: expected {} name".fmt(thing))
            }

            return {
                name: line[0].val,
                val: parse_value(line[1:]),
            }
        }

        parse_operation = (line: [@token]) -> @dictionary | @NULL {
            if line.length < 2 || line[1].matches("sym") {
                return self.log(line[0], "ERROR: invalid statement")
            }

            if !line[0].matches("word") {
                return self.log(line[0], "ERROR: expected operation name")
            }

            return {
                typ: "operation",
                name: line[0].val,
                args: parse_arguments(line[1:]),
            }
        }

        // these check for new modes
        get_define_section = (line: [@token]) -> @string | @NULL {
            return line[1].val if
            
                line.length == 2 
                && line[0].matches("sym", ".")
                && line[1].matches("word", const_define_section_tokens + var_define_section_tokens)
                
            else null
        }

        get_function_section = (line: [@token]) -> @dictionary | @NULL {
            if (
                line.length >= 2
                && line[0].matches(["word", "num"])
                && line[1].matches("sym", ":")
            ) {
                args = parse_arguments(line[2:], arg => arg.typ == "word").map(arg => arg.val)

                if line[0].matches("num") && args.length > 0 {
                    return self.log(
                        [line[0].line, line[2].col_start, line[-1].col_end],
                        "ERROR: trigger functions may not have arguments"
                    )
                }

                return {
                    context: line[0].val,
                    args: args,
                    sections: [
                        {
                            label: null,
                            statements: []
                        }
                    ]
                }
            }
            
            return null
        }

        get_label = (line: [@token]) -> @string | @NULL {
            return line[0].val if

                line.length == 2
                && line[0].matches("word")
                && line[1].matches("sym", ">")

            else null
        }

        // initializing stuff
        let mode = {
            typ: null,
            data: null, // extra data for the current mode
        }

        let parsed = {
            variables: [],
            constants: [],
            functions: [],
        }

        for line in lines {
            // check for new modes
            define = get_define_section(line)
            if define != null {
                mode.typ = "define"
                mode.data = define
                continue
            }

            function = get_function_section(line)
            if function != null {
                mode.typ = "function"
                parsed.functions.push(function)
                continue
            }

            if self.error { return }

            // parse statements
            if mode.typ == "define" {
                match mode.data {
                    in const_define_section_tokens: parsed.constants,
                    in var_define_section_tokens: parsed.variables,
                }.push(parse_definition(line, mode.data))
            }

            else if mode.typ == "function" {
                label = get_label(line)
                if label != null {
                    parsed.functions[-1].sections.push({ label: label, statements: [] })
                    continue
                }

                parsed.functions[-1].sections[-1].statements.push(parse_operation(line))
            }

            else {
                self.log(line[0], "ERROR: expected a define or function section")
            }

            if self.error { return }
        }

        return parsed
    },
}
