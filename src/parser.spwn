#[cache_output]

extract import "constant.spwn"

impl @trasm {
    parse: (self) {
        // organize the tokens into an array of lines
        let lines = []

        for token in self.lexed {
            while token.line >= lines.length { lines.push([]) }
            lines[token.line].push(token)
        }

        // specific parsing functions
        parse_value = (value: [@token]) -> @dictionary | @NULL {
            if (
                value.length == 2
                && value[0].matches("word", NOT_INFERABLE_TYPES)
                && (
                    value[1].matches(["num", "word"])
                    || (
                        value[0].val != "ctr"
                        && value[1].matches("sym", "?")
                    )
                )
            ) {
                return {
                    typ: value[0].val,
                    val: value[1].val,
                }
            }

            if value.length == 1 && !value[0].matches("sym") {
                return {
                    typ: value[0].typ,
                    val: value[0].val,
                }
            }

            self.log(
                "ERROR: invalid value",
                [value[0].line, value[0].col_start, value[-1].col_end],
            )
        }

        parse_arguments = (arguments: [@token], predicate: (@token) -> @bool = a => true) -> [@dictionary] {
            if arguments.length == 0 { return [] }

            commas = arguments.enumerate().filter(
                arg => arg[1].matches("sym", ",")
            ).map(
                arg => arg[0]
            )

            split = arguments.split(commas) if commas.length > 0 else [arguments]

            args = split.map(
                arg => arg.filter(
                    token => !token.matches("sym", ",")
                )
            ).filter(!= [])
            
            parsed_args = args.map(parse_value)
            
            for i in 0..parsed_args.length {
                if parsed_args[i] == null { return [] }

                if !predicate(parsed_args[i]) {
                    self.log(
                        "ERROR: invalid argument",
                        [args[i][0].line, args[i][0].col_start, args[i][-1].col_end],
                    )
                    return []
                }
            }
            return parsed_args
        }

        parse_definition = (line: [@token], typ: @string) -> @dictionary | @NULL {
            thing = match typ {
                in CONST_DEFINE_SECTION_TOKENS: "constant",
                in VAR_DEFINE_SECTION_TOKENS: "variable",
            }

            if line.length < 2 {
                return self.log("ERROR: invalid {} definition".fmt(thing), line[0])
            }

            if !line[0].matches("word") {
                return self.log("ERROR: expected {} name".fmt(thing), line[0])
            }

            values = parse_arguments(line[1:])

            return {
                name: line[0].val,
                val: values[0] if values.length == 1 else {
                    typ: "array",
                    val: values,
                },
            }
        }

        parse_operation = (line: [@token]) -> @dictionary | @NULL {
            if line.length < 2 || line[1].matches("sym") {
                return self.log("ERROR: invalid statement", line[0])
            }

            if !line[0].matches("word") {
                return self.log("ERROR: expected operation name", line[0])
            }

            return {
                name: line[0].val,
                args: parse_arguments(line[1:]),
            }
        }

        // these check for new contexts
        get_define_section = (line: [@token]) -> @string | @NULL {
            return line[1].val if
            
                line.length == 2 
                && line[0].matches("sym", ".")
                && line[1].matches("word", CONST_DEFINE_SECTION_TOKENS + VAR_DEFINE_SECTION_TOKENS)
                
            else null
        }

        get_function_section = (line: [@token]) -> @dictionary | @NULL {                   
            return {
                args: parse_arguments(line[2:], arg => arg.typ == "word").map(arg => arg.val),
                sections: [
                    {
                        label: null,
                        statements: []
                    }
                ],
            } if
                
                line.length >= 2
                && line[0].matches(["word", "num"])
                && line[1].matches("sym", ":")

            else null
        }

        get_label = (line: [@token]) -> @string | @NULL {
            return line[0].val if

                line.length == 2
                && line[0].matches("word")
                && line[1].matches("sym", ">")

            else null
        }

        // initializing stuff
        let curr_line = null // for interpreter errors 

        let context = {
            typ: null,
            data: null, // extra data for the current context
        }

        let parsed = {
            definitions: [],
            functions: {},
        }

        for line in lines {
            if line.length > 0 {
                curr_line = line[0].line

                // check for new contexts
                define = get_define_section(line)
                if define != null {
                    context.typ = "define"
                    context.data = define

                    parsed.definitions.push({
                        typ: define,
                        entries: [],
                        line: curr_line,
                    })
                    continue
                }

                let function = get_function_section(line)
                if function != null {
                    name = @string(line[0].val)
                    if name in parsed.functions {
                        self.log(
                            "ERROR: function '{}' already defined".fmt(name),
                            line[0], parsed.functions[name].line
                        )
                        continue
                    }

                    context.typ = "function"
                    context.data = name

                    function.line = curr_line
                    let parsed.functions[name] = function
                    continue
                }

                // parse statements
                if context.typ == "define" {
                    let def = parse_definition(line, context.data)
                    if def == null { continue }

                    let flag = false
                    
                    for section in parsed.definitions {
                        for e in section.entries {
                            if def.name == e.name {
                                let context_lines = [section.line, e.line]
                                if section.line != parsed.definitions[-1].line {
                                    context_lines.push(parsed.definitions[-1].line)
                                }

                                self.log("ERROR: {} '{}' already defined".fmt([
                                    match section.typ {
                                        in CONST_DEFINE_SECTION_TOKENS: "constant",
                                        in VAR_DEFINE_SECTION_TOKENS: "variable",
                                    },
                                    def.name
                                ]), line[0], context_lines)
                                flag = true
                            }
                        }
                    }

                    if flag { continue }

                    def.line = curr_line
                    parsed.definitions[-1].entries.push(def)
                }

                else if context.typ == "function" {
                    label = get_label(line)
                    if label != null {
                        parsed.functions[context.data].sections.push({ label: label, statements: [] })
                        continue
                    }

                    let statement = parse_operation(line)
                    statement.line = curr_line
                    parsed.functions[context.data].sections[-1].statements.push(statement)
                }

                else {
                    self.log("ERROR: expected a definition or function section", line[0])
                }
            }
        }

        return parsed
    },
}
