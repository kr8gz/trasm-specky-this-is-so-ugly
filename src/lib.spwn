#[cache_output]

extract $
print("Hello World!")

#[desc("TRigger ASseMbly compiler")]
type @trasm

impl @trasm {
    new: #[constructor, desc("Generates a TRASM output from code")] (code: @string, run: @bool = true) {
        let trasm = @trasm::{
            code: code,
            parsed: @trasm::parse(code),
        }
        return trasm
    },
    parse: #[desc("Parses the code")] (code: @string) {
        lines = code.split("\n")
        let output = []
        for i in 0..lines.length {
            output.push(@trasm::parse_line(lines[i], i))
        }
        return output
    },
    parse_line: #[desc("Parses a line of code")] (line: @string, index: @number) {
        // "what isn't current is previous" - specky 2022
        let previous = []
        let current = ""
        // "what isnt current or future is previous" - bombie 2022
        future = (force: @bool = false){
            if current != "" || force {
                previous.push(current)
                current = ""
            }
        }

        let is_string = false

        for char in line {
            let skip = false

            if is_string != false {
                if char == is_string {
                    is_string = false
                    future(true)
                } else {
                    current += char
                }
                continue
            }

            match char {
                ==' ': future(),
                ==',': (){
                    future()
                    previous.push(",")
                }(),
                in '"\'': (is_string = char),
                ==';': (skip = true),
                else: (current += char),
            }
            if skip { break }
        }

        future()
        if is_string != false {
            return @trasm::error_line(line, index, "Unterminated string")
        }

        return previous
    },
    run: #[desc("Runs the code")] (self) {
        for i in 0..self.parsed.length {
            @trasm::parse_line(lines[i], i)
        }
    },
    run_line: #[desc("Runs a line of code")] (line: [@string | @NULL], index: @number) {
        // x
        if line[0] == '.' {
            if line.length == 1 {
                if line == ".consts" {
                    // s
                } else if line == ".vars" {
                    //e
                } else {
                    return @trasm::error_line(line, index, "you are mom this dumb error !! 1 unlegal")
                }
            } else {
                return @trasm::error_line(line, index, "Xd lol error: u sttopipd no args here")
            }
        }
    },
    error_line: #[desc("Prints an error line")] (line: @string, index: @number, error: @string) {
        $.print("{} | {}\nERROR: {}".fmt([index + 1, line, error]))
    },
}
