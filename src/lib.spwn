#[cache_output]

extract $
print("Hello World!")

#[desc("TRigger ASseMbly compiler")]
type @trasm

impl @trasm {
    new: #[constructor, desc("Generates a TRASM output from code")] (code: @string, run: @bool = true) {
        let trasm = @trasm::{
            code: code,
            parsed: @trasm::parse(code),
        }
        return trasm
    },
    parse: #[desc("Parses the code")] (code: @string) {
        lines = code.split("\n")
        let output = []
        for i in 0..lines.length {
            output.push(@trasm::parse_line(lines[i], i))
        }
        return output
    },
    parse_line: #[desc("Parses a line of code")] (line: @string, index: @number) {
        // "what isn't current is previous" - specky 2022
        let previous = []
        let current = ""
        let is_string = false

        for char in line {
            let skip = false

            if is_string != false {
                if char == is_string {
                    is_string = false
                    previous.push(current)
                    current = ""
                } else {
                    current += char
                }
                continue
            }

            match char {
                ==' ': (){
                    if current != "" {
                        previous.push(current)
                        current = ""
                    }
                }(),
                ==',': (){
                    if current != "" {
                        previous.push(current)
                        current = ""
                    }
                    previous.push(",")
                }(),
                in '"\'': (is_string = char),
                ==';': (skip = true),
                else: (current += char),
            }
            if skip { break }
        }

        if current != "" { previous.push(current) }

        if is_string != false {
            return @trasm::error_line(line, index, "Unterminated string")
        }

        return previous
    },
    error_line: #[desc("Prints an error line")] (line: @string, index: @number, error: @string) {
        $.print("{} | {}\nERROR: {}".fmt([index + 1, line, error]))
    },
}
