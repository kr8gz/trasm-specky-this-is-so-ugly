#[cache_output]

letters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

operators = [
    "out", "wait", "call", "add", "spwn", "mov", "def", "div", "set", "sub", "mul", "pow"
    // copilot stupid
]
variable_tokens = ["variables", "variable", "vars", "var", "v"]
constant_tokens = ["constants", "constant", "consts", "const", "c"]
types = [
    "num", "str", "bool", // compile-time
    "gr", "id", "ctr",
]

keywords = operators + variable_tokens + constant_tokens + types

type @token

impl @token {
    matches: (self, typ: @string, val = @NULL) -> @bool {
        return self.typ == typ && ((val is @array && self.val in val) || self.val == val || val == @NULL)
    },
}

#[desc("TrIGgER ASSembly")]
type @trasm

impl @trasm {
    from_str: (code: @string) {
        let trasm = @trasm::{
            lines: code.split("\n"),
            error: false,
            variables: {},
            constants: {},
        }
        let trasm.lexed = trasm.lex()
        $.print(trasm.lexed)
        let trasm.parsed = trasm.parse()
        $.print(trasm.parsed)
    },

    from_file: (name: @string) {
        return @trasm::from_str($.readfile(name))
    },

    lex: (self) {
        let tokens = []
        let curr_line_index = 1
        let curr_line = null
        let start_index = 1
        let curr_char_index = 1
        let curr_char = null

        push_token = (typ: @string, val) {
            return tokens.push(@token::{
                typ: typ,
                val: val,
                line: curr_line_index,
                col_start: start_index,
                col_end: curr_char_index,
            })
        }

        update_char = () {
            curr_char = curr_line[curr_char_index] if curr_char_index < curr_line.length else null
        }

        next = () {
            curr_char_index++
            update_char()
        }
        prev = () {
            curr_char_index--
            update_char()
        }

        lex_word = () {
            let word = curr_char
            while true {
                next()
                if curr_char != null && (curr_char in letters || (!word.is_empty() && curr_char.is_digit())) {
                    word += curr_char
                } else {
                    prev()
                    return push_token("word", word)
                }
            }
        }

        lex_num = () {
            let num = curr_char
            let float = false

            while true {
                next()

                if curr_char == "." {
                    if float {
                        return self.log(curr_line_index, "ERROR: more than one decimal point in number")
                    } else {
                        float = true
                        num += curr_char
                    }
                } else if curr_char == null || !curr_char.is_digit() {
                    prev()
                    return push_token("num", num as @number)
                } else {
                    num += curr_char
                }
            }
        }

        lex_str = (quotes: @string) {
            let str = ""
            let escape = false

            while true {
                next()

                if escape {
                    str += match curr_char {
                        == "n" : "\n",
                        == "t" : "\t",
                        == "\\": "\\",
                        == "'" : "'",
                        == '"' : '"',
                        else: (){
                            self.log(curr_line_index, "ERROR: invalid escape sequence")
                            return ""
                        }(),
                    }
                    escape = false
                } else if curr_char == "\\" {
                    escape = true
                } else if curr_char == quotes {
                    return push_token("str", str)
                } else if curr_char == null {
                    return self.log(curr_line_index, "ERROR: unclosed string")
                } else {
                    str += curr_char
                }
            }
        }

        for i in 0..self.lines.length {
            curr_line_index = i
            curr_line = self.lines[i]
            curr_char_index = -1
            
            while true {
                next()
                start_index = curr_char_index

                if curr_char == null || curr_char == ";" { break }
                else if curr_char in letters { lex_word() }
                else if curr_char.is_digit() { lex_num() }
                else if curr_char in "\"'" { lex_str(curr_char) }
                else if !(curr_char in " \t") { push_token("sym", curr_char) }

                if self.error { return }
            }
        }

        return tokens
    },

    parse: (self) {
        let lines = []

        for token in self.lexed {
            while token.line >= lines.length { lines.push([]) }
            lines[token.line].push(token)
        }

        is_define_section = (line: @array) -> @bool {
            return (
                line.length == 2 
                && line[0].matches("sym", ".")
                && line[1].matches("word", constant_tokens + variable_tokens)
            )
        }

        parse_define_section = (line: @array) -> @string {
            return match line[1].val {
                in constant_tokens: "const",
                in variable_tokens: "var",
            }
        }

        // TODO unfuck these

        // parse_definition = (line: @array) {
            
        // }

        // parse_operation = (line: @array) {
        //     let operation = {
        //         typ: "operation",
        //         line: line[0].line,
        //         operator: line[0].val,
        //         arguments: [],
        //     }
        //     if line[0].typ != "word" {
        //         return self.log(line[0], "ERROR: expected operation name")
        //     }
        //     if !(line[0].typ in operators) {
        //         return self.log(line[0], "ERROR: expected valid operator")
        //     }
        //     if line.length >= 2 {
        //         operation.arguments = parse_arguments(line[1:])
        //     }

        //     return operation
        // }

        // parse_arguments = (arguments: @array) {
        //     for i in 0..arguments.length {
        //         if arguments[i].typ != "word" {
        //             return self.log(arguments[i], "ERROR: expected argument name")
        //         } else if arguments[i].val in keywords {
        //             return self.log(arguments[i], "ERROR: argument name should not be a keyword")
        //         }
        //     }
        // }

        // parse_value = (value: @array) {

        // }

        let context = {
            typ: null,
            kind: null, // basically sub-type
        }

        let statements = {
            definitions: [],
            functions: [],
        }

        for line in lines {
            // check for new context
            if is_define_section(line) {
                context.typ = "define"
                context.kind = parse_define_section(line)
                continue
            }

            if is_function_section(line) {
                context.typ = "function"
                context.kind = parse_function_section(line)
                continue
            }

            // parse statements
            if context.typ == "define" {
                statements.definitions.push(parse_definition(line))
            }

            else if context.typ == "function" {
                statements.functions.push(parse_operation(line))
            }

            else {
                self.log(line[0], "ERROR: expected a define or function section")
            }

            if self.error { return }
        }
    },

    run: (self) {

    },

    log: (self, context: @dictionary | @number, msg: @string) {
        [ line_index, char_index ] = match context {
            @number: [ context, 0 ],
            @dictionary: [ context.line, context.col ],
        }

        line_context = "{} | ".fmt(line_index + 1)
        
        $.print("{}{}".fmt([line_context, self.lines[line_index]]))
        $.print("{}{}".fmt([" " * line_context.length, msg]))

        if msg.starts_with("ERROR") { self.error = true }
    },
}
