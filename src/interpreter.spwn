#[cache_output]

extract import "constant.spwn"

impl @trasm {
    run: (self) {
        get_variable = (name: @string) {
            // dont forget local variables :bingu:
        }

        set_variable = (name: @string, val) {

        }

        not_inferable_type_conversion = (typ, let val) {
            if val is @string && val != "?" {
                val = get_variable(val)
            }

            if val is @number {
                return typ(val)
            }

            if val == "?" {
                return match typ {
                    == @group: ?g,
                    == @color: ?c,
                    == @item: ?i,
                }
            }

            return self.log(val.line, "ERROR: can only convert number to " + match typ {
                == @group: "group",
                == counter: "counter",
                == @color: "color",
                == @item: "item ID",
            })
        }

        eval_value = (value: @dictionary) {
            return match value.typ {
                == "num" | == "str": value.val,
                == "group": not_inferable_type_conversion(@group, value.val),
                == "ctr": not_inferable_type_conversion(counter, value.val),
                == "col": not_inferable_type_conversion(@color, value.val),
                == "item": not_inferable_type_conversion(@item, value.val),
                == "word": get_variable(value.val),
                == "array": [eval_value(val) for val in value.val]
            }
        }
    
        // initialize constants and variables
        for section in self.parsed.definitions {
            for entry in section.entries {
                match section.typ {
                    in const_define_section_tokens: self.constants.set(entry.name, eval_value(entry.val)),
                    in var_define_section_tokens:   self.variables.set(entry.name, eval_value(entry.val)),
                }
            }
        }

        
    }
}
