#[cache_output]

extract import "constant.spwn"

type @temp_context // needed for virtual context splitting

constant_context = ?g // don't use this in any way (if you aren't specky ðŸ¤£) // hallo meine freunde und specky
update_context = (set: @group) {
    $.extend_trigger_func(constant_context, () {
        let @temp_context::context = set // virtual context
    })
}

tiger_ass_context = (macro: () -> _) {
    $.extend_trigger_func(@temp_context::context, (){
        macro()
        update_context($.trigger_fn_context())
    })
}

impl @trasm {
    run: (self) {
        get_variable = (name: @string) {
            return match name {
                in self.constants: self.constants[name],
                in self.variables: self.variables[name],
                else: self.log("ERROR: name '{}' is not defined".fmt(name))
            }
        }

        set_variable = (name: @string, val) {
            match name {
                in self.constants: self.log("ERROR: cannot change constant '{}'".fmt(name)),
                in self.variables: (self.variables[name] = val),
                else: self.log("ERROR: name '{}' is not defined".fmt(name))
            }
        }

        not_inferable_type_conversion = (typ, let val) {
            if val is @string && val != "?" {
                val = get_variable(val)
            }

            if val is @number {
                return typ(val)
            }

            if val == "?" {
                return match typ {
                    == @group: ?g,
                    == @color: ?c,
                    == @item: ?i,
                }
            }

            return self.log("ERROR: can only convert number to " + match typ {
                == @group: "group",
                == counter: "counter", // counter(x) creates a new counter while the others convert to the type idk specky you write
                == @color: "color",
                == @item: "item ID",
            }, val.line)
        }

        eval_value = (value: @dictionary) {
            return match value.typ {
                == "num" | == "str": value.val,
                == "group": not_inferable_type_conversion(@group, value.val),
                == "ctr": not_inferable_type_conversion(counter, value.val),
                == "col": not_inferable_type_conversion(@color, value.val),
                == "item": not_inferable_type_conversion(@item, value.val),
                == "word": get_variable(value.val),
                == "array": [eval_value(val) for val in value.val]
            }
        }

        types_match = (args: @array, allowed: [@type_indicator | [@type_indicator]]) -> @bool {
            return args.length == allowed.length && allowed.map_index(
                (e, i) => (e is @type_indicator && args[i].type == e) || (e is [@type_indicator] && args[i].type in e)
            ).all()
        }

        let run_function

        run_statement = (name: @string, args: [@dictionary]) {
            $.print("running {} with {}".fmt([name, args]))

            ergs = [eval_value(arg) for arg in args] // i know im funny
            if self.error { return }

            match name {
                // assignment operators and such
                == "set": _,
                == "del": _, // del what??
                // math operators
                == "add": () {
                    if types_match(ergs, [@counter, [@number, @counter]]) {
                        tiger_ass_context(() => ergs[0] += ergs[1])
                    } else if types_match(ergs, [@item, @number]) {
                        tiger_ass_context(() => ergs[0].add(ergs[1]))
                    } else if types_match(ergs, [@number, @number]) {
                        set_variable(args[0].val, ergs[0] + ergs[1])
                    } else {
                        self.log("ERROR: cannot add types 'kr8gz' and 'doing homework'")
                    }
                } (),
                == "sub": _,
                == "mul": _,
                == "div": _,
                == "mod": _,
                == "pow": _,
                // comparison operators
                == "cmp": _,
                == "eq": _,
                == "ne": _,
                == "lt": _,
                == "gt": _,
                == "le": _,
                == "ge": _,
                // function/macro calls
                == "spwn": _,
                == "call": _,
                // control flow
                == "mov": _, // mov is for moving groups idiot
                == "goto": _,
                // pseudo-built-in functions
                == "out": () {
                    $.print(ergs.join(""))
                } (),
                == "wait": () {
                    if types_match(ergs, [@number]) {
                        tiger_ass_context(() => wait(ergs[0]))
                    } else {
                        // TODO ERROR MESSAGES
                    }
                } (),
            }
        }

        run_function = (name: @string, args: @array = []) {
            let start_context = ?g
            update_context(start_context)

            func = self.parsed.functions[name]

            if args.length != func.args.length {
                self.log(
                    "ERROR: function '{}' takes {} arguments, found {}".fmt([name, func.args.length, args.length]),
                    0, // this arg should be the line where it's called
                    func.line
                )
                return
            }

            let section_index = 0
            while section_index < func.sections.length {
                for statement in func.sections[section_index].statements {
                    run_statement(statement.name, statement.args)
                    if self.error { return }
                }
                section_index++
            }
        }

        // initialize constants and variables
        for section in self.parsed.definitions {
            for entry in section.entries {
                match section.typ {
                    in CONST_DEFINE_SECTION_TOKENS: self.constants.set(entry.name, eval_value(entry.val)),
                    in VAR_DEFINE_SECTION_TOKENS:   self.variables.set(entry.name, eval_value(entry.val)),
                }
            }
        }

        start = self.parsed.functions.keys().filter(in START_CONTEXTS)
        match start.length {
            == 0: self.log("ERROR: no start function found"),
            == 1: run_function(start[0]),
            else: () {
                start_lines = start.map(f => self.parsed.functions[f].line).sort()
                self.log(
                    "ERROR: multiple start functions found",
                    start_lines[-1], start_lines[:-1]
                )
            } ()
        }
    }
}
